-- SQLBook: Code
DROP FUNCTION IF EXISTS crm.has_person;
DROP PROCEDURE IF EXISTS crm.add_person;
DROP PROCEDURE IF EXISTS crm.add_customer;
DROP PROCEDURE IF EXISTS crm.add_address;
DROP PROCEDURE IF EXISTS crm.add_product_category;
DROP PROCEDURE IF EXISTS crm.add_campaign;
DROP PROCEDURE IF EXISTS crm.add_sales_rep;
DROP PROCEDURE IF EXISTS crm.add_connection;
DROP PROCEDURE IF EXISTS crm.add_product;
DROP PROCEDURE IF EXISTS crm.add_order;
DROP PROCEDURE IF EXISTS crm.add_customer_interaction;
DROP PROCEDURE IF EXISTS crm.add_purchase;
-- SQLBook: Code
DELETE FROM person WHERE TRUE;
DELETE FROM customer WHERE TRUE;
DELETE FROM address  WHERE TRUE;
DELETE FROM product_category  WHERE TRUE;
DELETE FROM campaign  WHERE TRUE;
DELETE FROM connection WHERE TRUE;
DELETE FROM crm.product WHERE TRUE;
DELETE FROM crm.order WHERE TRUE;
DELETE FROM crm.customer_interaction WHERE TRUE;
DELETE FROM crm.purchase WHERE TRUE;
-- SQLBook: Code
CREATE PROCEDURE crm.add_person(
    IN first_name VARCHAR(45),
    IN last_name VARCHAR(45),
    IN email VARCHAR(45),
    IN phone VARCHAR(15),
    OUT person_id INT UNSIGNED
)
BEGIN
    INSERT INTO crm.person (first_name, last_name, email, phone)
        VALUES (first_name, last_name, email, phone);
    SELECT LAST_INSERT_ID() INTO person_id;
END
-- SQLBook: Code
CREATE FUNCTION crm.has_person (
    p_person_id INT UNSIGNED
) RETURNS TINYINT(1)
    DETERMINISTIC
BEGIN
    DECLARE person_count INT;
    SET person_count = (
        SELECT COUNT(*)
        FROM crm.person
        WHERE person_id = p_person_id
    );
    IF person_count > 0 THEN
        RETURN 1;
    ELSE
        RETURN 0;
    END IF;
END
-- SQLBook: Code
CREATE PROCEDURE crm.add_address(
    IN street VARCHAR(45),
    IN city VARCHAR(45),
    IN state VARCHAR(45),
    IN zip_code VARCHAR(5),
    OUT address_id INT UNSIGNED
)
BEGIN
    INSERT INTO crm.address (street, city, state, zip_code)
        VALUES (street, city, state, zip_code);
    SELECT LAST_INSERT_ID() INTO address_id;
END
-- SQLBook: Code
CREATE FUNCTION crm.has_address (
    p_address_id INT UNSIGNED
) RETURNS TINYINT(1)
    DETERMINISTIC
BEGIN
    DECLARE address_count INT;
    SET address_count = (
        SELECT COUNT(*)
        FROM crm.address
        WHERE address_id = p_address_id
    );
    IF address_count > 0 THEN
        RETURN 1;
    ELSE
        RETURN 0;
    END IF;
END
-- SQLBook: Code
CREATE PROCEDURE crm.add_customer(
    IN date_of_birth DATE,
    IN street VARCHAR(45),
    IN city VARCHAR(45),
    IN state VARCHAR(45),
    IN zip_code VARCHAR(5),

    INOUT person_id INT UNSIGNED,
    
    IN first_name VARCHAR(45),
    IN last_name VARCHAR(45),
    IN email VARCHAR(45),
    IN phone VARCHAR(15),
    
    OUT customer_id INT UNSIGNED
)
BEGIN
    DECLARE address_id INT UNSIGNED;

    IF NOT has_person(person_id)
    THEN
        CALL add_person(first_name, last_name, email, phone, person_id);
    END IF;

    INSERT INTO crm.customer (person_id, address_id, date_of_birth)
        VALUES (person_id, NULL, date_of_birth);
    SELECT LAST_INSERT_ID() INTO customer_id;
    
    CALL add_address(street, city, state, zip_code, address_id);

    UPDATE crm.customer
    SET address_id = address_id
    WHERE customer_id = customer_id;
END
-- SQLBook: Code
CREATE PROCEDURE crm.add_product_category(
    IN product_category_name VARCHAR(45),
    IN description VARCHAR(200)
)
BEGIN
    INSERT INTO crm.product_category (product_category_name, description)
        VALUES (product_category_name, description);
END
-- SQLBook: Code
CREATE PROCEDURE crm.add_campaign (
    IN name VARCHAR(45),
    IN start_date DATE,
    IN end_date DATE,
    IN budget DECIMAL(16, 4),
    IN description VARCHAR(200),
    OUT campaign_id INT UNSIGNED
)
BEGIN
    INSERT INTO crm.campaign (name, start_date, end_date, budget, description)
        VALUES (name, start_date, end_date, budget, description);
END
-- SQLBook: Code
CREATE PROCEDURE crm.add_sales_rep(
    IN management_region VARCHAR(20),

    INOUT person_id INT UNSIGNED,
    
    IN first_name VARCHAR(45),
    IN last_name VARCHAR(45),
    IN email VARCHAR(45),
    IN phone VARCHAR(15),
    
    OUT sales_rep_id INT UNSIGNED
)
BEGIN
    IF NOT has_person(person_id)
    THEN
        CALL add_person(first_name, last_name, email, phone, person_id);
    END IF;
    
    INSERT INTO crm.sales_rep (person_id, management_region)
        VALUES (person_id, management_region);
    SELECT LAST_INSERT_ID() INTO sales_rep_id;
END
-- SQLBook: Code
CREATE PROCEDURE crm.add_connection (
    IN person_1_id INT UNSIGNED,
    IN person_2_id INT UNSIGNED
)
BEGIN
    INSERT INTO crm.connection (person_1_id, person_2_id)
        VALUES (person_1_id, person_2_id);
END
-- SQLBook: Code
CREATE PROCEDURE crm.add_product (
    IN product_category_name VARCHAR(45),
    IN name VARCHAR(45),
    IN price DECIMAL(16, 4),
    IN stock INT UNSIGNED,
    IN discount TINYINT UNSIGNED,
    IN description VARCHAR(200),
    OUT product_id INT UNSIGNED
)
BEGIN
    INSERT INTO crm.product (product_category_name, name, price, stock, discount, description)
        VALUES (product_category_name, name, price, stock, discount, description);
    SELECT LAST_INSERT_ID() INTO product_id;
END
-- SQLBook: Code
CREATE PROCEDURE crm.add_order (
    IN customer_id INT UNSIGNED,
    IN status ENUM('pending', 'completed', 'canceled'),
    IN start_date DATETIME,
    IN end_date DATETIME,
    OUT order_id INT UNSIGNED
)
BEGIN
    IF status IS NULL THEN
        SET status = 'pending';
    END IF;

    IF start_date IS NULL THEN
        SET start_date = CURRENT_TIMESTAMP;
    END IF;

    INSERT INTO crm.order (customer_id, status, start_date, end_date)
        VALUES (customer_id, status, start_date, end_date);
    SELECT LAST_INSERT_ID() INTO order_id;
END
-- SQLBook: Code
CREATE PROCEDURE crm.add_customer_interaction (
    IN customer_id INT UNSIGNED,
    IN sales_rep_id INT UNSIGNED,
    IN date DATETIME,
    IN type ENUM('phone call', 'email', 'meeting'),
    IN details VARCHAR(200),
    IN outcome VARCHAR(200),
    OUT customer_interaction_id INT UNSIGNED
)
BEGIN
    IF date IS NULL THEN
        SET date = CURRENT_TIMESTAMP;
    END IF;

    INSERT INTO crm.customer_interaction (customer_id, sales_rep_id, date, type, details, outcome)
        VALUES (customer_id, sales_rep_id, date, type, details, outcome);
    SELECT LAST_INSERT_ID() INTO customer_interaction_id;
END
-- SQLBook: Code
CREATE PROCEDURE crm.add_purchase (
    IN order_id INT UNSIGNED,
    IN product_id INT UNSIGNED,
    IN quantity INT UNSIGNED
)
BEGIN
    INSERT INTO crm.purchase (order_id, product_id, quantity)
        VALUES (order_id, product_id, quantity);
END
-- SQLBook: Code

CALL add_person('John', 'Doe', 'here@there.com', '011-111-1111', @person_id);

CALL add_customer('2017-06-15', '123 Main St', 'Anytown', 'NY', '12345', @person_id, NULL, NULL, NULL, NULL, @customer_id);

CALL add_product_category('Electronics', 'Electronic devices');

-- NEEDS NORMALIZATION
CALL add_campaign('Summer Sale', '2017-06-15', '2017-09-15', 10000.00, 'Summer Sale Campaign', @campaign_id);

CALL add_sales_rep('North Region', @person2_id, 'John2', 'Doe2', 'here2@there.com', '022-111-1111', @sales_rep_id);

CALL add_connection(@person_id, @person2_id);

-- NEEDS NORMALIZATION
CALL add_product('Electronics', 'Laptop', 1000.00, 10, 0, 'Laptop description', @product_id);

-- NEEDS NORMALIZATION
CALL add_order(@customer_id, NULL, NULL, '2025-06-15 13:00:00', @order_id);

-- NEEDS NORMALIZATION
CALL add_customer_interaction(@customer_id, @sales_rep_id, NULL, 'phone call', 'Details', 'Outcome', @customer_interaction_id);

CALL add_purchase(@order_id, @product_id, 3);